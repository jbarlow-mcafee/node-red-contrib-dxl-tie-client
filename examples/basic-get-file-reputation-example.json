[
    {
        "id": "b1b630b3.6e4d7",
        "type": "tab",
        "label": "TIE Get File Reputation Example",
        "disabled": false,
        "info": "This sample invokes the TIE DXL service to retrieve the reputation of a file (as\r\nidentified by hashes). The response to the TIE request is printed to the\r\nNode-RED `debug` tab.\r\n\r\n### Prerequisites\r\n\r\n* The samples configuration step has been completed (see the\r\n  [DXL Configuration Sample](https://github.com/opendxl/node-red-contrib-dxl/wiki/Client-Configuration)).\r\n* A TIE service is available on the DXL fabric.\r\n\r\n### Setup\r\n\r\n* To deploy the flow, press the `Deploy` button in the upper-right corner of the\r\n  screen. If Node-RED is able to properly connect to the DXL fabric, a green dot\r\n  with the word `connected` should appear under the `Get reputation from TIE`\r\n  node.\r\n\r\n### Running\r\n\r\nTo exercise the flow for the \"notepad.exe\" file, double-click the button on the\r\nleft side of the `Specify hashes for Notepad.exe` node.\r\n\r\nTo exercise the flow for the \"EICAR Standard Anti-Virus Test File\" file,\r\ndouble-click the button on the left side of the `Specify hashes for EICAR` node.\r\n\r\n### Output\r\n\r\nThe output in the Node-RED `debug` tab after the flow is run for the\r\n`notepad.exe` file should appear similar to the following:\r\n\r\n```\r\n▶ { 1: object, 3: object }\r\n```\r\n\r\nClick on the right arrow buttons to expand the contents of the object. The\r\ncontent should look similar to the following:\r\n\r\n```\r\n▼ object\r\n ▼ 1: object\r\n  ▼ attributes: object\r\n      2120340: \"2139160704\"\r\n    createDate: 1451502875\r\n    providerId: 1\r\n    trustLevel: 99\r\n ▼ 3: object\r\n  ▼ attributes: object\r\n      2101652: \"17\"\r\n      2102165: \"1451502875\"\r\n      2111893: \"21\"\r\n      2114965: \"0\"\r\n      2139285: \"72339069014638857\"\r\n    createDate: 1526675921\r\n    providerId: 3\r\n    trustLevel: 99\r\n```\r\n\r\nThe `key` for each entry in the object corresponds to a particular `provider` of\r\nthe associated `reputation`. The list of file reputation providers can\r\nbe found in the\r\n[FileProvider documentation](https://opendxl.github.io/opendxl-tie-client-python/pydoc/dxltieclient.constants.html#dxltieclient.constants.FileProvider)\r\nin the TIE Python client SDK.\r\n\r\nThe McAfee Global Threat Intelligence (GTI) service is identified in the results\r\nas `providerId: 1`. The trust level associated with the GTI response\r\n(`trustLevel: 99`) indicates that the file is known good.\r\n\r\nThe output in the Node-RED `debug` tab after the flow is run for the `EICAR`\r\nfile should also appear similar to the following:\r\n\r\n```\r\n▶ { 1: object, 3: object }\r\n```\r\n\r\nClick on the right arrow buttons to expand the contents of the object. The\r\ncontent should look similar to the following:\r\n\r\n```\r\n▼ object\r\n ▼ 1: object\r\n  ▼ attributes: object\r\n      2120340: \"2139162632\"\r\n    createDate: 1451504331\r\n    providerId: 1\r\n    trustLevel: 1\r\n ▼ 3: object\r\n  ▼ attributes: object\r\n      2101652: \"11\"\r\n      2102165: \"1451504331\"\r\n      2111893: \"22\"\r\n      2114965: \"0\"\r\n      2139285: \"72339069014638857\"\r\n    createDate: 1451504331\r\n    providerId: 3\r\n    trustLevel: 0\r\n```\r\n\r\nThe trust level associated with the GTI response (`trustLevel: 1`) indicates\r\nthat the file is known bad.\r\n\r\nSee the \r\n[TrustLevel documentation](https://opendxl.github.io/opendxl-tie-client-python/pydoc/dxltieclient.constants.html#dxltieclient.constants.TrustLevel)\r\nin the TIE Python client SDK for the list of standard trust levels.\r\n\r\n### Details\r\n\r\nThe flow exercises the nodes below.\r\n\r\n#### Specify file hashes\r\n\r\nThis is an `inject` input node which starts the flow. This node\r\ninjects a new message with a `payload` property which specifies the hashes of\r\nthe file to use for the lookup.\r\n\r\n#### Set hashes request parameter\r\n\r\nThis is a `change` node which copies the value from the `payload` message\r\nproperty to the `hashes` property. The `Set hashes request parameter` node uses\r\nthe `hashes` property when constructing the parameters for the TIE reputation\r\nrequest. \r\n\r\n#### Get reputation from TIE\r\n\r\nThis is a `tie get file reputation` node. This node connects to\r\nthe DXL fabric and sends a DXL `Request` message to the TIE service to lookup\r\nfile reputation information.\r\n\r\nThe request message includes the `hashes` properties set by the\r\n`Set hashes request parameter` node.\r\n\r\nThe `Return` property is set to \"a parsed JSON object\" to indicate that the\r\npayload for the response should be added to the output message as a JavaScript\r\nobject decoded from JSON.\r\n\r\n#### Output reputation\r\n\r\nThis is a `debug` output node. This node outputs the `payload` set on\r\nthe message by the `Get reputation from TIE` node. The output should\r\ninclude information for reputation data for the file."
    },
    {
        "id": "e678c6ec.e231c8",
        "type": "dxl-tie-get-file-reputation",
        "z": "b1b630b3.6e4d7",
        "name": "Get reputation from TIE",
        "client": "",
        "returnType": "obj",
        "x": 290,
        "y": 200,
        "wires": [
            [
                "5393fe31.faf1b"
            ]
        ]
    },
    {
        "id": "1f374194.839efe",
        "type": "inject",
        "z": "b1b630b3.6e4d7",
        "name": "Specify hashes for Notepad.exe",
        "topic": "",
        "payload": "{\"md5\":\"f2c7bb8acc97f92e987a2d4087d021b1\",\"sha1\":\"7eb0139d2175739b3ccb0d1110067820be6abd29\",\"sha256\":\"142e1d688ef0568370c37187fd9f2351d7ddeda574f8bfa9b0fa4ef42db85aa2\"}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 170,
        "y": 40,
        "wires": [
            [
                "435743ea.02b88c"
            ]
        ]
    },
    {
        "id": "5393fe31.faf1b",
        "type": "debug",
        "z": "b1b630b3.6e4d7",
        "name": "Output reputation",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 510,
        "y": 200,
        "wires": []
    },
    {
        "id": "a462f316.d775d",
        "type": "inject",
        "z": "b1b630b3.6e4d7",
        "name": "Specify hashes for EICAR",
        "topic": "",
        "payload": "{\"md5\":\"44d88612fea8a8f36de82e1278abb02f\",\"sha1\":\"3395856ce81f2b7382dee72602f798b642f14140\",\"sha256\":\"275a021bbfb6489e54d471899f7db9d1663fc695ec2fe2a2c4538aabf651fd0f\"}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 150,
        "y": 100,
        "wires": [
            [
                "435743ea.02b88c"
            ]
        ]
    },
    {
        "id": "435743ea.02b88c",
        "type": "change",
        "z": "b1b630b3.6e4d7",
        "name": "Set hashes request parameter",
        "rules": [
            {
                "t": "set",
                "p": "hashes",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 80,
        "wires": [
            [
                "e678c6ec.e231c8"
            ]
        ]
    }
]
